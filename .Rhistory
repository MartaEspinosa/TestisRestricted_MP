####### 3. CTA #######
gene_names_ctype = df_5percent %>% subset(gene_type == "protein_coding") %>% select(gene_name) %>% unique() %>% subset(gene_name %in% df_5percent_expr$gene_name) %>% pull(gene_name)
CTA_matrix = nozeros_matrix_log[gene_names_ctype,]
####### 4. CTA-Xchr #######
gene_names_ctype = df_5percent %>% subset(gene_type == "protein_coding")  %>% subset(chr == "X") %>% select(gene_name) %>% unique() %>% subset(gene_name %in% df_5percent_expr$gene_name) %>% pull(gene_name)
CTA_matrix_X = nozeros_matrix_log[gene_names_ctype,]
####### 5. CTA-nonXchr #######
gene_names_ctype = df_5percent %>% subset(gene_type == "protein_coding")  %>% subset(chr != "X") %>% select(gene_name) %>% unique() %>% subset(gene_name %in% df_5percent_expr$gene_name) %>% pull(gene_name)
CTA_matrix_nonX = nozeros_matrix_log[gene_names_ctype,]
####### 6. lncRNA #######
gene_names_ctype = df_5percent %>% subset(gene_type == "lncRNA")%>% select(gene_name) %>% unique() %>% subset(gene_name %in% df_5percent_expr$gene_name) %>% pull(gene_name)
lncRNA_matrix = nozeros_matrix_log[gene_names_ctype,]
##################################################
## Perform hierarchical clustering for rows (you can also do this for columns if needed)
hc_all = hclust(dist(nozeros_matrix_log), method="complete")
hc_nonCTA = hclust(dist(nonCTA_matrix), method="complete")
hc_CTA = hclust(dist(CTA_matrix), method = "complete")
hc_CTAX = hclust(dist(CTA_matrix_X), method = "complete")
# plot(as.dendrogram(hc_CTAX), label = rownames(CTA_matrix_X), main = "Dendrogram of CTA Genes")
hc_CTAnonX = hclust(dist(CTA_matrix_nonX), method = "complete")
hc_lncRNA = hclust(dist(lncRNA_matrix), method = "complete")
## Cut the dendrograms at the same height
## Define the cut height (you can adjust the value depending on your needs)
cut_height = 5  # for example, 5; this is arbitrary and should be chosen based on your data's dendrogram scale
## Cut the tree and get the number of clusters
clusters_all = cutree(hc_all, h = cut_height)  # Cut the tree for matrix1 at the defined height
clusters_nonCTA = cutree(hc_nonCTA, h = cut_height)  # Cut the tree for matrix1 at the defined height
clusters_CTA = cutree(hc_CTA, h = cut_height)  # Cut the tree for matrix1 at the defined height
clusters_CTAX = cutree(hc_CTAX, h = cut_height)  # Cut the tree for matrix1 at the defined height
clusters_CTAnonX = cutree(hc_CTAnonX, h = cut_height)  # Cut the tree for matrix1 at the defined height
clusters_lncRNA = cutree(hc_lncRNA, h = cut_height)  # Cut the tree for matrix2 at the same height
## Count the number of clusters
num_clusters_all = length(unique(clusters_all))
num_clusters_nonCTA = length(unique(clusters_nonCTA))
num_clusters_CTA = length(unique(clusters_CTA))
num_clusters_CTAX = length(unique(clusters_CTAX))
num_clusters_CTAnonX = length(unique(clusters_CTAnonX))
num_clusters_lncRNA = length(unique(clusters_lncRNA))
cat("Number of clusters in all:", num_clusters_all, "\n")
cat("Number of clusters in nonCTA:", num_clusters_nonCTA, "\n")
cat("Number of clusters in CTA:", num_clusters_CTA, "\n")
cat("Number of clusters in CTA-X:", num_clusters_CTAX, "\n")
cat("Number of clusters in CTA-nonX:", num_clusters_CTAnonX, "\n")
cat("Number of clusters in lncRNA:", num_clusters_lncRNA, "\n")
}
unique_ctypes = cancers
###### CTA #######
# List to store silhouette scores by ctype
silhouette_scores_by_ctype_CTA <- list()
# Loop over each 'ctype' group
for (ctype_value in unique_ctypes) {
patients_per_ctype = patients %>% subset(ctype == ctype_value) %>% pull(patient)
CTA_to_cluster = annot %>% subset(gene_type == "protein_coding")
# Subset the data for the specific ctype
ctype_matrix_CTA = to_cluster_matrix[rownames(to_cluster_matrix) %in% CTA_to_cluster$gene_name, colnames(to_cluster_matrix) %in% patients_per_ctype]
# Perform clustering (e.g., k-means) on the subset
kmeans_result = kmeans(ctype_matrix_CTA, centers = 3)  # Adjust centers as needed
# Calculate silhouette scores for this ctype
silhouette_score = silhouette(kmeans_result$cluster, dist(ctype_matrix_CTA))
# Store the silhouette score
silhouette_scores_by_ctype_CTA[[ctype_value]] <- data.frame(
gene = rownames(ctype_matrix_CTA),
ctype = ctype_value,
silhouette_width = silhouette_score[, "sil_width"]
)
}
data_completed_TSA_forced = read.csv(file.path(save_wd,"TTS_forcedTPM_patients.csv"))
to_cluster = data_completed_TSA_forced %>% select(gene_name, patient, forced_tumor_expr) %>% pivot_wider(names_from = "patient", values_from = "forced_tumor_expr")
to_cluster[is.na(to_cluster)] = 0
to_cluster_values = mutate_all(to_cluster[,-1], function(x) as.numeric(as.character(x)))
## convert to matrix
matrix = data.matrix(to_cluster_values)
rownames(matrix) = to_cluster$gene_name
matrix = na.omit(matrix)
to_cluster_matrix = matrix[,colSums(matrix) > 0]
##### 1. Silhouette Coefficient (Clustering Quality)
# The silhouette coefficient measures how well each point in a cluster is similar to its own cluster compared to other clusters. It ranges from -1 to 1:
#
# 1 indicates that the sample is well-matched to its own cluster.
# 0 indicates the sample is on or very close to the decision boundary between two clusters.
# -1 indicates that the sample may have been assigned to the wrong cluster.
# The mean silhouette score across all points in your dataset is a good indicator of how well-defined your clusters are (i.e., tendency to clusterize).
# Steps:
#-  Transpose the matrix: Since silhouette scores are typically calculated for clustering objects (patients in this case), and you want to measure clustering tendencies per gene, you need to transpose the matrix so that genes become the "samples" (rows).
#-  Cluster genes based on their expression patterns across patients.
#-  Calculate silhouette scores for each gene based on the clusters.
# Here, we use k-means clustering. Choose a suitable number of clusters, for example k=3.
# You can use other clustering methods as well (like hierarchical clustering)
#### MAYBE WE WOULD NEED TO CONSIDER CTYPE HERE?
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(to_cluster_matrix, centers = 3)
# Step 3: Compute silhouette scores for the genes
silhouette_score <- silhouette(kmeans_result$cluster, dist(to_cluster_matrix))
# Step 4: Extract and visualize the silhouette scores
silhouette_scores_per_gene <- data.frame(
gene = rownames(to_cluster_matrix),
silhouette_width = silhouette_score[, "sil_width"]
)
# Step 5: Check the silhouette scores per gene
print(silhouette_scores_per_gene)
# Optional: Visualize the silhouette scores (overall visualization)
fviz_silhouette(silhouette_score)
# You can also calculate the average silhouette width for the entire dataset
mean_silhouette <- mean(silhouette_score[, 3])
cat("Mean Silhouette Score for all genes:", mean_silhouette)
# Example: Sorting genes by silhouette width
silhouette_scores_per_gene <- silhouette_scores_per_gene[order(silhouette_scores_per_gene$silhouette_width, decreasing = TRUE), ]
head(silhouette_scores_per_gene)
silhouette_scores_per_gene = merge(silhouette_scores_per_gene, annot %>% select(gene_name, gene_type, chr), by.x="gene", by.y="gene_name")
silhouette_scores_per_gene = silhouette_scores_per_gene %>% mutate(gene_type_chr = case_when(gene_type == "protein_coding" & chr == "X" ~ "X-CT",
gene_type == "protein_coding" & chr != "X" ~ "nonX-CT",
TRUE ~ gene_type))
# Example: Plotting silhouette widths per gene
ggplot(silhouette_scores_per_gene, aes(x = reorder(gene, silhouette_width), y = silhouette_width, color=gene_type_chr)) +
geom_bar(stat = "identity") +
coord_flip() +  # Rotate the plot for better visualization
labs(title = "Silhouette Widths per Gene", x = "Gene", y = "Silhouette Width") +
theme_minimal()
ggplot(silhouette_scores_per_gene, aes(x = gene_type_chr, y = silhouette_width, fill=gene_type_chr)) +
geom_boxplot() +
labs(title = "Silhouette Widths per Gene",
x="") +
theme_minimal() +
theme(legend.position = "none")
unique_ctypes = cancers
###### CTA #######
# List to store silhouette scores by ctype
silhouette_scores_by_ctype_CTA <- list()
# Loop over each 'ctype' group
for (ctype_value in unique_ctypes) {
patients_per_ctype = patients %>% subset(ctype == ctype_value) %>% pull(patient)
CTA_to_cluster = annot %>% subset(gene_type == "protein_coding")
# Subset the data for the specific ctype
ctype_matrix_CTA = to_cluster_matrix[rownames(to_cluster_matrix) %in% CTA_to_cluster$gene_name, colnames(to_cluster_matrix) %in% patients_per_ctype]
# Perform clustering (e.g., k-means) on the subset
kmeans_result = kmeans(ctype_matrix_CTA, centers = 3)  # Adjust centers as needed
# Calculate silhouette scores for this ctype
silhouette_score = silhouette(kmeans_result$cluster, dist(ctype_matrix_CTA))
# Store the silhouette score
silhouette_scores_by_ctype_CTA[[ctype_value]] <- data.frame(
gene = rownames(ctype_matrix_CTA),
ctype = ctype_value,
silhouette_width = silhouette_score[, "sil_width"]
)
}
unique_ctypes = cancers
###### CTA #######
# List to store silhouette scores by ctype
silhouette_scores_by_ctype_CTA <- list()
# Loop over each 'ctype' group
for (ctype_value in unique_ctypes) {
print(ctype_value)
patients_per_ctype = patients %>% subset(ctype == ctype_value) %>% pull(patient)
CTA_to_cluster = annot %>% subset(gene_type == "protein_coding")
# Subset the data for the specific ctype
ctype_matrix_CTA = to_cluster_matrix[rownames(to_cluster_matrix) %in% CTA_to_cluster$gene_name, colnames(to_cluster_matrix) %in% patients_per_ctype]
# Perform clustering (e.g., k-means) on the subset
kmeans_result = kmeans(ctype_matrix_CTA, centers = 3)  # Adjust centers as needed
# Calculate silhouette scores for this ctype
silhouette_score = silhouette(kmeans_result$cluster, dist(ctype_matrix_CTA))
# Store the silhouette score
silhouette_scores_by_ctype_CTA[[ctype_value]] <- data.frame(
gene = rownames(ctype_matrix_CTA),
ctype = ctype_value,
silhouette_width = silhouette_score[, "sil_width"]
)
}
unique_ctypes = c("BRCA","BLCA","LUAD","PRAD","LUSC","COAD","LIHC")
###### CTA #######
# List to store silhouette scores by ctype
silhouette_scores_by_ctype_CTA <- list()
# Loop over each 'ctype' group
for (ctype_value in unique_ctypes) {
print(ctype_value)
patients_per_ctype = patients %>% subset(ctype == ctype_value) %>% pull(patient)
CTA_to_cluster = annot %>% subset(gene_type == "protein_coding")
# Subset the data for the specific ctype
ctype_matrix_CTA = to_cluster_matrix[rownames(to_cluster_matrix) %in% CTA_to_cluster$gene_name, colnames(to_cluster_matrix) %in% patients_per_ctype]
# Perform clustering (e.g., k-means) on the subset
kmeans_result = kmeans(ctype_matrix_CTA, centers = 3)  # Adjust centers as needed
# Calculate silhouette scores for this ctype
silhouette_score = silhouette(kmeans_result$cluster, dist(ctype_matrix_CTA))
# Store the silhouette score
silhouette_scores_by_ctype_CTA[[ctype_value]] <- data.frame(
gene = rownames(ctype_matrix_CTA),
ctype = ctype_value,
silhouette_width = silhouette_score[, "sil_width"]
)
}
# Combine silhouette scores into one data frame
silhouette_scores_all_CTA = do.call(rbind, silhouette_scores_by_ctype_CTA)
silhouette_scores_all_CTA$gene_type = "CT"
###### CT-X #######
# List to store silhouette scores by ctype
silhouette_scores_by_ctype_CTX <- list()
# Loop over each 'ctype' group
for (ctype_value in unique_ctypes) {
patients_per_ctype = patients %>% subset(ctype == ctype_value) %>% pull(patient)
CTX_to_cluster = annot %>% subset(gene_type == "protein_coding" & chr == "X")
# Subset the data for the specific ctype
ctype_matrix_CTX = to_cluster_matrix[rownames(to_cluster_matrix) %in% CTX_to_cluster$gene_name, colnames(to_cluster_matrix) %in% patients_per_ctype]
# Perform clustering (e.g., k-means) on the subset
kmeans_result = kmeans(ctype_matrix_CTX, centers = 3)  # Adjust centers as needed
# Calculate silhouette scores for this ctype
silhouette_score = silhouette(kmeans_result$cluster, dist(ctype_matrix_CTX))
# Store the silhouette score
silhouette_scores_by_ctype_CTX[[ctype_value]] <- data.frame(
gene = rownames(ctype_matrix_CTX),
ctype = ctype_value,
silhouette_width = silhouette_score[, "sil_width"]
)
}
# Combine silhouette scores into one data frame
silhouette_scores_all_CTX = do.call(rbind, silhouette_scores_by_ctype_CTX)
silhouette_scores_all_CTX$gene_type = "CT-X"
###### CT-nonX #######
# List to store silhouette scores by ctype
silhouette_scores_by_ctype_CTnonX <- list()
# Loop over each 'ctype' group
for (ctype_value in unique_ctypes) {
patients_per_ctype = patients %>% subset(ctype == ctype_value) %>% pull(patient)
CTnonX_to_cluster = annot %>% subset(gene_type == "protein_coding" & chr != "X")
# Subset the data for the specific ctype
ctype_matrix_CTnonX = to_cluster_matrix[rownames(to_cluster_matrix) %in% CTnonX_to_cluster$gene_name, colnames(to_cluster_matrix) %in% patients_per_ctype]
# Perform clustering (e.g., k-means) on the subset
kmeans_result = kmeans(ctype_matrix_CTnonX, centers = 3)  # Adjust centers as needed
# Calculate silhouette scores for this ctype
silhouette_score = silhouette(kmeans_result$cluster, dist(ctype_matrix_CTnonX))
# Store the silhouette score
silhouette_scores_by_ctype_CTnonX[[ctype_value]] <- data.frame(
gene = rownames(ctype_matrix_CTnonX),
ctype = ctype_value,
silhouette_width = silhouette_score[, "sil_width"]
)
}
# Combine silhouette scores into one data frame
silhouette_scores_all_CTnonX = do.call(rbind, silhouette_scores_by_ctype_CTnonX)
silhouette_scores_all_CTnonX$gene_type = "CT-nonX"
###### non-CTA #######
# List to store silhouette scores by ctype
silhouette_scores_by_ctype_nonCTA <- list()
# Loop over each 'ctype' group
for (ctype_value in unique_ctypes) {
patients_per_ctype = patients %>% subset(ctype == ctype_value) %>% pull(patient)
nonCTA_to_cluster = annot %>% subset(gene_type != "protein_coding")
# Subset the data for the specific ctype
ctype_matrix_nonCTA = to_cluster_matrix[rownames(to_cluster_matrix) %in% nonCTA_to_cluster$gene_name, colnames(to_cluster_matrix) %in% patients_per_ctype]
# Perform clustering (e.g., k-means) on the subset
kmeans_result = kmeans(ctype_matrix_nonCTA, centers = 3)  # Adjust centers as needed
# Calculate silhouette scores for this ctype
silhouette_score = silhouette(kmeans_result$cluster, dist(ctype_matrix_nonCTA))
# Store the silhouette score
silhouette_scores_by_ctype_nonCTA[[ctype_value]] <- data.frame(
gene = rownames(ctype_matrix_nonCTA),
ctype = ctype_value,
silhouette_width = silhouette_score[, "sil_width"]
)
}
# Combine silhouette scores into one data frame
silhouette_scores_all_nonCTA = do.call(rbind, silhouette_scores_by_ctype_nonCTA)
silhouette_scores_all_nonCTA$gene_type = "non-CT"
###### lncRNA #######
# List to store silhouette scores by ctype
silhouette_scores_by_ctype_lncRNA <- list()
# Loop over each 'ctype' group
for (ctype_value in unique_ctypes) {
patients_per_ctype = patients %>% subset(ctype == ctype_value) %>% pull(patient)
lncRNA_to_cluster = annot %>% subset(gene_type == "lncRNA")
# Subset the data for the specific ctype
ctype_matrix_lncRNA = to_cluster_matrix[rownames(to_cluster_matrix) %in% lncRNA_to_cluster$gene_name, colnames(to_cluster_matrix) %in% patients_per_ctype]
# Perform clustering (e.g., k-means) on the subset
kmeans_result = kmeans(ctype_matrix_lncRNA, centers = 3)  # Adjust centers as needed
# Calculate silhouette scores for this ctype
silhouette_score = silhouette(kmeans_result$cluster, dist(ctype_matrix_lncRNA))
# Store the silhouette score
silhouette_scores_by_ctype_lncRNA[[ctype_value]] <- data.frame(
gene = rownames(ctype_matrix_lncRNA),
ctype = ctype_value,
silhouette_width = silhouette_score[, "sil_width"]
)
}
# Combine silhouette scores into one data frame
silhouette_scores_all_lncRNA = do.call(rbind, silhouette_scores_by_ctype_lncRNA)
silhouette_scores_all_lncRNA$gene_type = "lncRNA"
print("CT")
print(summary(silhouette_scores_all_CTA$silhouette_width))
print("CT-X")
print(summary(silhouette_scores_all_CTX$silhouette_width))
print("CT-nonX")
print(summary(silhouette_scores_all_CTnonX$silhouette_width))
print("nonCT")
print(summary(silhouette_scores_all_nonCTA$silhouette_width))
print("lncRNA")
print(summary(silhouette_scores_all_lncRNA$silhouette_width))
silhouettes = rbind(silhouette_scores_all_CTA, silhouette_scores_all_CTX, silhouette_scores_all_CTnonX, silhouette_scores_all_nonCTA,silhouette_scores_all_lncRNA)
ctype_var = LIHC
ctype_var = "BRCA"
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(purrr)
library(ggvenn)
library(ggpubr)
library(ggside)
library(bioseq)
library(rcartocolor)
library(ggbeeswarm)
library(ggbreak)
annot = read.csv("/users/genomics/marta/TestisProject_SaraRazquin/with_TranscriptomeReconstruction/human/newReference_Resconstructed/1transcript_1gene.reconstructed.csv")
# names(gene_transcript) = c("gene_id"gene_type"gene_name")
# gene_transcript$gene_id = gsub("\\..*"gene_transcript$gene_id)
Q2_wd = "/projects_eg/projects/marta/TestisRestricted_Microproteins_TSA/with_TranscriptomeReconstruction/Q2_TestisRestricted/human"
pre_save_wd = "/projects_eg/projects/marta/TestisRestricted_Microproteins_TSA/with_TranscriptomeReconstruction/Q3_TestisRestrictedTumors/human"
plots_wd = "/projects_eg/projects/marta/TestisRestricted_Microproteins_TSA/with_TranscriptomeReconstruction/Q4_TestisRestricted_TumorSpecific/human/plots"
save_wd = "/projects_eg/projects/marta/TestisRestricted_Microproteins_TSA/with_TranscriptomeReconstruction/Q4_TestisRestricted_TumorSpecific/human"
cancers = c("BRCA","BLCA","LUAD","KIRC","KIRP","PRAD","LUSC","COAD","LIHC")
tcga_projects=c("TCGA-BRCA","TCGA-LUSC","TCGA-PRAD","TCGA-KIRC","TCGA-KIRP","TCGA-LUAD","TCGA-BLCA")#,"TCGA-LIHC"]
other_projects=c("GSE102101_KIRC","GSE133624_BLCA","GSE22260_PRAD","PRJEB2449_PRAD","SRP238334_KIRC","GSE214846_LIHC","GSE229705_LUAD","TCGA_COAD","SRP107326_COAD")
manuscript_projects = c("liver_adjacent_totalRNA_LIHC","hcc_normal_totalRNA_LIHC","GSE193567_LIHC","LIHC_TCGA_LIHC")
# deleted_projects=c("GSE103001_BRCA"GSE89223_PRAD")
all_projects = c(tcga_projects,other_projects,manuscript_projects)
cancers_dir = "/users/genomics/marta/TestisProject_SaraRazquin/with_TranscriptomeReconstruction/cancers"
fc = read.csv(pate0(cancers_dir,"/merged_fc_",ctype_var))
fc = read.csv(paste0(cancers_dir,"/merged_fc_",ctype_var))
fc = read.csv(paste0(cancers_dir,"/merged_fc_",ctype_var,".csv"))
fc %>% head
fc = fc %>% pivot_longer(cols=-c(transcript_id, Length), names_to = "sample", values_to = "TPM")
fc$sample = gsub("\\.","-",fc$sample)
fc %>% head
fc$sample = gsub("\\.","-",fc$sample)
fc$ctype = ctype_var
expression_data = data.frame("transcript_id" = character(),
"Length" = numeric(),
"sample" = character(),
"TPM"= numeric(),
stringsAsFactors = F)
expression_data = data.frame("transcript_id" = character(),
"Length" = numeric(),
"sample" = character(),
"TPM"= numeric(),
"ctype" = character(),
stringsAsFactors = F)
expression_data = data.frame("transcript_id" = character(),
"Length" = numeric(),
"sample" = character(),
"TPM"= numeric(),
"ctype" = character(),
stringsAsFactors = F)
for(ctype_var in cancers) {
fc = read.csv(paste0(cancers_dir,"/merged_fc_",ctype_var,".csv"))
fc = fc %>% pivot_longer(cols=-c(transcript_id, Length), names_to = "sample", values_to = "TPM")
fc$sample = gsub("\\.","-",fc$sample)
fc$ctype = ctype_var
expression_data = rbind(expression_data, fc)
}
expression_data = data.frame("transcript_id" = character(),
"Length" = numeric(),
"sample" = character(),
"TPM"= numeric(),
"ctype" = character(),
stringsAsFactors = F)
for(ctype_var in cancers) {
print(ctype_var)
fc = read.csv(paste0(cancers_dir,"/merged_fc_",ctype_var,".csv"))
fc = fc %>% pivot_longer(cols=-c(transcript_id, Length), names_to = "sample", values_to = "TPM")
fc$sample = gsub("\\.","-",fc$sample)
fc$ctype = ctype_var
expression_data = rbind(expression_data, fc)
}
knitr::opts_chunk$set(echo = TRUE)
# packages <- c("dplyr "tidyr "ggplot2 "stringr "purrr "ggvenn "ggpubr
#               "ggside "bioseq "ggthemr "ggbeeswarm "ggbreak")
#
# # Install packages that are not already installed
# installed_packages <- installed.packages()
# for (pkg in packages) {
#   if (!(pkg %in% installed_packages[, "Package"])) {
#     install.packages(pkg)
#   }
# }
#
# # Load the packages
# lapply(packages, library, character.only = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(purrr)
library(ggvenn)
library(ggpubr)
library(ggside)
library(bioseq)
# library(ggthemr)
library(ggbeeswarm)
library(ggbreak)
library(GGally)
annot = read.csv("/users/genomics/marta/TestisProject_SaraRazquin/with_TranscriptomeReconstruction/human/newReference_Resconstructed/1transcript_1gene.reconstructed.csv")
# names(gene_transcript) = c("gene_id"gene_type"gene_name")
# gene_transcript$gene_id = gsub("\\..*"gene_transcript$gene_id)
pre_save_wd = "/projects_eg/projects/marta/TestisRestricted_Microproteins_TSA/with_TranscriptomeReconstruction/Q2_TestisRestricted/human"
plots_wd = "/projects_eg/projects/marta/TestisRestricted_Microproteins_TSA/with_TranscriptomeReconstruction/Q3_TestisRestrictedTumors/human/plots"
save_wd = "/projects_eg/projects/marta/TestisRestricted_Microproteins_TSA/with_TranscriptomeReconstruction/Q3_TestisRestrictedTumors/human"
cancers = c("BRCA","BLCA","LUAD","KIRC","KIRP","PRAD","LUSC","COAD","LIHC")
tcga_projects=c("TCGA-BRCA","TCGA-LUSC","TCGA-PRAD","TCGA-KIRC","TCGA-KIRP","TCGA-LUAD","TCGA-BLCA")#,"TCGA-LIHC"]
other_projects=c("GSE102101_KIRC","GSE133624_BLCA","GSE22260_PRAD","PRJEB2449_PRAD","SRP238334_KIRC","GSE214846_LIHC","GSE229705_LUAD","TCGA_COAD","SRP107326_COAD")
manuscript_projects = c("liver_adjacent_totalRNA_LIHC","hcc_normal_totalRNA_LIHC","GSE193567_LIHC","LIHC_TCGA_LIHC")
# deleted_projects=c("GSE103001_BRCA"GSE89223_PRAD")
all_projects = c(tcga_projects,other_projects,manuscript_projects)
cancers_dir = "/users/genomics/marta/TestisProject_SaraRazquin/with_TranscriptomeReconstruction/cancers"
print("Translated IN testis")
translated_IN_testis = read.csv(file.path(pre_save_wd,"testisRestricted_GTEx_translatedINtestis.csv"))
table(translated_IN_testis$gene_type)
print("Corresponding to how many genes?")
translated_IN_testis_genes = translated_IN_testis %>% select(gene_type, gene_name) %>% unique()
table(translated_IN_testis_genes$gene_type)
print("Translated ONLY in testis")
translated_only_testis = read.csv(file.path(pre_save_wd,"testisRestricted_GTEx_translatedONLYtestis.csv"))
table(translated_only_testis$gene_type)
print("Corresponding to how many genes?")
translated_only_testis_genes = translated_only_testis %>% select(gene_type, gene_name) %>% unique()
table(translated_only_testis_genes$gene_type)
## add column to translated IN testis
translated_IN_testis = translated_IN_testis %>% mutate(ONLYtranslation_testis = case_when(transcript_id %in% translated_only_testis$transcript_id ~ "ONLYTestis",
TRUE ~ "several_tissues"))
table(translated_IN_testis$ONLYtranslation_testis, translated_IN_testis$gene_type)
TAA_10percent = data.frame(transcript_id = character(),
gene_id = character(),
gene_name = character(),
gene_type = character(),
Length = character(),
n = numeric(),
ctype = factor(),
stringsAsFactors = F)
for(c in 1:length(cancers)) {
temp = read.csv(paste0(cancers_dir,"/tumorexpressed/cancertypes/tumor_1FPKM_n10percent_",cancers[c],".csv"))
temp$ctype = cancers[c]
TAA_10percent = rbind(TAA_10percent, temp)
}
ggplot(TAA_10percent %>% group_by(gene_type, ctype) %>% count(), aes(x=n, y=ctype, fill=gene_type)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("protein_coding"="#CC79A7",
"lncRNA" = "#009E73",
"processed_pseudogene" = "#0090B2",
"novel" = "#E69F00")) +
ggtitle("Tumor-Expressed genes per cancer type (> 1 TPM in > 10% patients)") +
theme_classic()
TAA_translated = merge(TAA_10percent, translated_IN_testis, by=c("transcript_id","gene_name","gene_id","gene_type"))
TAA_translated = TAA_translated %>% subset(ONLYtranslation_testis == "ONLYTestis")
table(TAA_translated$gene_type, TAA_translated$ctype)
TAA_translated_genes = TAA_translated %>% subset(ONLYtranslation_testis == "ONLYTestis") %>% select(transcript_id, gene_name, gene_type, ctype) %>% unique()
table(TAA_translated_genes$gene_type, TAA_translated_genes$ctype)
table(TAA_translated_genes$ctype)
data_completed = data.frame(transcript_id = character(),
Length = numeric(),
sample = character(),
TPM = numeric(),
patient = factor(),
normal_tumor = factor(),
project = character(),
ctype = character(),
stringsAsFactors = F)
for (ctype_var in cancers) {
print(ctype_var)
## table of counts
df = read.csv(paste0(cancers_dir,"/merged_fc_",ctype_var,".csv"))
## pivot to make it easier to join
df_long = df %>% pivot_longer(cols=-c(Length, transcript_id), values_to = "TPM", names_to = "sample")
df_long$sample = gsub("^X","", df_long$sample)
df_long$sample = gsub("\\.","-",df_long$sample)
## patients
temp_patients = read.csv(paste0(cancers_dir,"/merged_patients_",ctype_var,".csv"))
temp_patients = temp_patients %>% pivot_longer(cols=c("normal","tumor"), names_to = "normal_tumor", values_to = "sample")
## combine
complete_tableofcounts = merge(temp_patients, df_long, by="sample")
complete_tableofcounts$ctype = ctype_var
## select the tumor-associated per ctype
temp_TAA_translated_genes = TAA_translated_genes %>% subset(ctype == ctype_var)
TAA_complete_tableofcounts = complete_tableofcounts %>% subset(transcript_id %in% temp_TAA_translated_genes$transcript_id)
data_completed = rbind(data_completed, TAA_complete_tableofcounts)
}
data_completed = merge(data_completed, annot, by="transcript_id")
data_completed_wide = data_completed %>% select(-c(sample)) %>% pivot_wider(names_from="normal_tumor", values_from = "TPM")
filtered_data_TAA = data_completed_wide %>% filter(tumor > 1)
filtered_data_TAA_long = filtered_data_TAA %>% pivot_longer(cols=c(normal, tumor), values_to = "TPM", names_to = "normal_tumor")
filtered_data_TAA_long$logTPM = log(filtered_data_TAA_long$TPM)
temporary = filtered_data_TAA_long %>% select(gene_name, ctype) %>% unique()
table(temporary$ctype)
filtered_data_TAA_long %>% ehad
filtered_data_TAA_long %>% head
ggplot(filtered_data_TAA_long, aes(x=project, y=logTPM, fill=normal_tumor)) +
geom_boxplot(position = position_dodge(width=.8)) +
scale_fill_manual(values=c("#FFB900","#5773CC")) +
geom_hline(yintercept=log(0.1)) +
geom_hline(yintercept=log(1)) +
labs(x="",
title="Testis-Restricted genes reactivated in cancer\nExpression in tumor and adjacent samples") +
theme_classic()
ggplot(filtered_data_TAA_long, aes(x=project, y=logTPM, fill=normal_tumor)) +
geom_boxplot(position = position_dodge(width=.8)) +
scale_fill_manual(values=c("#FFB900","#5773CC")) +
geom_hline(yintercept=log(0.1)) +
geom_hline(yintercept=log(1)) +
labs(x="",
title="Testis-Restricted genes reactivated in cancer\nExpression in tumor and adjacent samples") +
theme_classic() +
theme(axis.text.x = element_text(angle=90))
ggsave(file.path(plots_wd,"PNG/TestisRestricted_Reactivated_AdjacentTumor_perproject.png"))
ggsave(file.path(plots_wd,"PNG/TestisRestricted_Reactivated_AdjacentTumor_perproject.png"))
ggsave(file.path(plots_wd,"PDF/TestisRestricted_Reactivated_AdjacentTumor_perproject.pdf"))
expression_data = merge(expression_data, annot, by="transcript_id")
